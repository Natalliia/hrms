-- Not all done... needs to be changed
-- SEQUENCES

CREATE SEQUENCE TOTAL_SEQ
	START WITH 100000000 
	INCREMENT BY 1 
	NO MAXVALUE
;


-- TABLES

DROP TABLE IF EXISTS employees;
DROP TABLE IF EXISTS roles;
DROP TABLE IF EXISTS employee_role;
DROP TABLE IF EXISTS departmens;
DROP TABLE IF EXISTS employee_departmen;



CREATE TABLE employees (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  firstname VARCHAR(255) NOT NULL,
  lastname VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  salary DOUBLE(10) NOT NULL,
  birthday DATETIME NOT NULL,
  active BOOLEAN NOT NULL,
  role_id INTEGER 
);
CREATE INDEX ix_employees_email on employees (email);

CREATE TABLE roles (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL
);

INSERT INTO roles (id, name) VALUES (1, 'Admin'), 
(2, 'Reader'), 
(3, 'Editor');


CREATE TABLE employee_role (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  user_id INTEGER,
  role_id INTEGER,
  FOREIGN KEY (employee_id) REFERENCES users(id),
  FOREIGN KEY (role_id) REFERENCES roles(id)
);

CREATE TABLE departments (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL
);

CREATE TABLE issues (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  created DATETIME NOT NULL,
  modified DATETIME NOT NULL,
  title VARCHAR(255) NOT NULL,
  status_id INTEGER,
  created_user_id INTEGER,
  category_id INTEGER, 
  performer_id INTEGER,
  FOREIGN KEY (status_id) REFERENCES status(id),
  FOREIGN KEY (created_user_id) REFERENCES users(id),
  FOREIGN KEY (category_id) REFERENCES categories(id),
  FOREIGN KEY (performer_id) REFERENCES users(id)
);


CREATE TABLE issue_posts (
  id INTEGER PRIMARY KEY AUTO_INCREMENT,
  issues_id INTEGER,
  created DATETIME NOT NULL,
  post_text VARCHAR(8000) NOT NULL,
  created_user_id INTEGER,
  FOREIGN KEY (issues_id) REFERENCES issues(id),
  FOREIGN KEY (created_user_id) REFERENCES users(id)
);

CREATE TABLE POSTS (
	POST_UID	BIGINT NOT NULL DEFAULT NEXTVAL('TOTAL_SEQ'),
	THREAD_UID	BIGINT NOT NULL,
	MESSAGE		TEXT,
	ADDED_TS	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_TS	TIMESTAMP
);

CREATE TABLE THREADS (
	THREAD_UID	BIGINT NOT NULL DEFAULT NEXTVAL('TOTAL_SEQ'),
	MESSAGE		TEXT,
	ADDED_TS	TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	MODIFIED_TS	TIMESTAMP
);



-- CONSTRAINTS

ALTER TABLE POSTS ADD CONSTRAINT PK_POSTS PRIMARY KEY (POST_UID)
;
ALTER TABLE THREADS ADD CONSTRAINT PK_THREADS PRIMARY KEY (THREAD_UID)
;

ALTER TABLE POSTS ADD CONSTRAINT FK_POSTS_THREADS
    FOREIGN KEY ( THREAD_UID ) REFERENCES THREADS ( THREAD_UID )
;

-- TRIGGERS

CREATE OR REPLACE FUNCTION UPDATE_PROC() RETURNS TRIGGER AS $BODY$
    BEGIN
	IF (TG_OP = 'UPDATE') THEN
	      SELECT CURRENT_TIMESTAMP INTO NEW.MODIFIED_TS;
	END IF;
RETURN NEW;
    END;
$BODY$ LANGUAGE plpgsql;


CREATE TRIGGER POSTS_UPD_TRG
 BEFORE UPDATE ON POSTS
 FOR EACH ROW EXECUTE PROCEDURE UPDATE_PROC();

CREATE TRIGGER THREADS_UPD_TRG
 BEFORE UPDATE ON THREADS
 FOR EACH ROW EXECUTE PROCEDURE UPDATE_PROC();


-- INDEXES

CREATE INDEX IX_FK_POSTS_THREADS ON POSTS ( THREAD_UID )
;
